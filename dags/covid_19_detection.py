import pandas as pd   
import os 
import shutil
print( os.listdir("D:\Downloads\Dataset") )

#load path  and create data for positice samples
FILE_PATH= "D:\Downloads\Dataset\covid19_positive_cases_DS\covid-chestxray-dataset-master\metadata.csv"
IMAGE_PATH = "D:\Downloads\Dataset\covid19_positive_cases_DS\covid-chestxray-dataset-master\images"

df = pd.read_csv(FILE_PATH)
print(df.shape)






TRAIN_PATH = "D:\Downloads\Dataset\covid19_normal_cases_DS\chest_xray\train"
VAL_PATH = "D:\Downloads\Dataset\covid19_normal_cases_DS\chest_xray\val"



import numpy as np
import matplotlib.pyplot as plt 
import keras 
import tensorflow as tf
from keras.layers import *
from keras.models import *
from keras.preprocessing import image
import tensorflow

model = Sequential() 
model.add(Conv2D(64,kernel_size=(3,3),activation="relu",input_shape=(224,224,3)))

model.add(Conv2D(64,kernel_size=(3,3),activation="relu")) #extracting features
model.add(MaxPooling2D(pool_size=(2,2)))
model.add(Dropout(0.25)) #regularization technique

model.add(Conv2D(128,(3,3),activation="relu")) #extracting features
model.add(MaxPooling2D(pool_size=(2,2)))
model.add(Dropout(0.25))

model.add(Conv2D(128,(3,3),activation="relu")) #extracting features
model.add(MaxPooling2D(pool_size=(2,2)))
model.add(Dropout(0.25))

model.add(Flatten()) #convert the multi-dimensional output of the preceding convolutional layers into a one-dimensional array (vector).
model.add(Dense(64,activation="relu")) #fully connected layer: 64 neurons, each connected to every neuron in the previous layer
model.add(Dropout(0.5))

model.add(Dense(1,activation="sigmoid"))

model.compile(loss=keras.losses.binary_crossentropy,optimizer = "adam",metrics=["accuracy"])

model.summary()


# train the model

    # data augmentation

train_datagen = tf.keras.preprocessing.image.ImageDataGenerator(
    rescale = 1./255,
    shear_range = 0.2,
    zoom_range = 0.2,
    horizontal_flip = True,
)
test_dataset = tf.keras.preprocessing.image.ImageDataGenerator(rescale = 1./255) 


train_generator = train_datagen.flow_from_directory(
    'D:\Downloads\Dataset\covid19_normal_cases_DS\chest_xray\train',
    target_size = (224,224),
    batch_size = 32,
    class_mode = 'binary'
)

train_generator.class_indices

validation_generator = test_dataset.flow_from_directory(
    'D:\Downloads\Dataset\covid19_normal_cases_DS\chest_xray\val',
    target_size = (224,224),
    batch_size = 32,
    class_mode = 'binary'
)


# Fit the model

hist = model.fit_generator( #trains the model for the specified number of epochs using the training data generated by train_generator
    train_generator,
    steps_per_epoch= 8,
    epochs=10,
    validation_data= validation_generator,
    validation_steps=2
)
# #confusion matrix

y_actual = []
y_test = []
for i in os.listdir(r"D:/Downloads/Dataset/covid19_normal_cases_DS/chest_xray/val/NORMAL"):
    
  img = image.load_img("D:/Downloads/Dataset/covid19_normal_cases_DS/chest_xray/val/NORMAL/"+i,target_size=(224,224))
  img = image.img_to_array(img)
  img = np.expand_dims(img,axis=0)
  p = model.predict_classes(img)
  y_test.append(p[0,0])
  y_actual.append(1)


print(y_test)
print(y_actual)


history = hist
print(history.history.keys())

plt.plot(history.history['acc'])
plt.plot(history.history['val_acc'])
plt.title('model accuracy')
plt.ylabel('accuracy')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper left')
plt.show()




import numpy as np
# from google.colab.patches import cv2_imshow
import cv2 
from keras.preprocessing import image


xtest_image = image.load_img('Dataset/Prediction/ryct.2020200034.fig5-day7.jpeg', target_size = (224, 224))
xtest_image = image.img_to_array(xtest_image)
xtest_image = np.expand_dims(xtest_image, axis = 0)
results = model.predict_classes(xtest_image)
# training_set.class_indices
imggg = cv2.imread('Dataset/Prediction/ryct.2020200034.fig5-day7.jpeg')
print("This Xray Image is of positive covid-19 patient")
imggg = np.array(imggg)
imggg = cv2.resize(imggg,(400,400))
plt.imshow(imggg)
# cv2_imshow(imggg)
# print(results)
if results[0][0] == 0:
    prediction = 'Positive For Covid-19'
else:
    prediction = 'Negative for Covid-19'
print("Prediction Of Our Model : ",prediction)

